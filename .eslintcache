[{"C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\index.js":"1","C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\App.js":"2","C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\cmps\\Header.jsx":"3","C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\cmps\\Button.jsx":"4","C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\pages\\Home.jsx":"5","C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\services\\GraphDataService.js":"6","C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\cmps\\Graph.jsx":"7","C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\services\\storageService.js":"8","C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\cmps\\Footer.jsx":"9","C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\reportWebVitals.js":"10"},{"size":305,"mtime":1607445296654,"results":"11","hashOfConfig":"12"},{"size":437,"mtime":1607438478361,"results":"13","hashOfConfig":"12"},{"size":348,"mtime":1607442559344,"results":"14","hashOfConfig":"12"},{"size":323,"mtime":1607444866328,"results":"15","hashOfConfig":"12"},{"size":1331,"mtime":1607444587350,"results":"16","hashOfConfig":"12"},{"size":1752,"mtime":1607444386282,"results":"17","hashOfConfig":"12"},{"size":2277,"mtime":1607444778282,"results":"18","hashOfConfig":"12"},{"size":368,"mtime":1607434055109,"results":"19","hashOfConfig":"12"},{"size":789,"mtime":1607442546525,"results":"20","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7rdi4c",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\index.js",[],"C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\App.js",[],["46","47"],"C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\cmps\\Header.jsx",[],"C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\cmps\\Button.jsx",[],"C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\pages\\Home.jsx",["48"],"import getGraphData from '../services/GraphDataService'\r\nimport React, { Component } from 'react';\r\nimport ReactLoading from 'react-loading';\r\n\r\n\r\n// import Graph from '../cmps/Graph'\r\nimport Graph from '../cmps/Graph'\r\n\r\n\r\n\r\nclass Home extends Component {\r\n\r\n    state = {\r\n        graphData: null,\r\n        isLoading: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadGraphData(1, 'Minutes')\r\n    }\r\n\r\n    // Load the graph data and setting state.\r\n    loadGraphData = async (period, precision) => {\r\n        var graphData = await getGraphData(period, precision)\r\n        this.setState({ graphData })\r\n        this.setState({ isLoading: false })\r\n\r\n    }\r\n\r\n    // A function which passed as props for the buttons component to change time stamps when calling the API\r\n    onChangePeriod = async (period, precision) => {\r\n        this.setState({ isLoading: true })\r\n        var newGraphData = await this.loadGraphData(period, precision)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { graphData, isLoading } = this.state\r\n\r\n        return (isLoading) ? <ReactLoading type={`spin`} color={`#60b625`} height={'150px'} width={'150px'} className='loader' /> : (\r\n            <div>\r\n                <Graph data={graphData} onChangePeriod={this.onChangePeriod} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\services\\GraphDataService.js",[],"C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\cmps\\Graph.jsx",["49"],"import React from 'react';\r\nimport Button from './Button'\r\nimport Highcharts from 'highcharts/highstock';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\n\r\nfunction Graph(props) {\r\n\r\n    // btnData is an array for creating the time stamps buttons, it contains desplay and the two parameters which will be passed \r\n    // ownards for the onChangePeriod funciton\r\n    const btnData = [\r\n        { txt: '1 Minute', precision: 'Minutes', period: '1', id: 1 },\r\n        { txt: '5 Minutes', precision: 'Minutes', period: '5', id: 2 },\r\n        { txt: '1 Hour', precision: 'Hour', period: '1', id: 3 },\r\n        { txt: '1 Week', precision: 'Hour', period: '168', id: 4 },\r\n    ]\r\n\r\n    // setting for Highcharts graph\r\n    const options = {\r\n        chart: {\r\n            reflow: true\r\n        },\r\n        rangeSelector: {\r\n            selected: 1\r\n        },\r\n        title: {\r\n            text: 'FX Empire - Stock API'\r\n        },\r\n        legend: {\r\n            enabled: true\r\n        },\r\n        plotOptions: {\r\n            series: {\r\n                showInLegend: true\r\n            }\r\n        },\r\n        series: [{\r\n            type: 'ohlc',\r\n            id: 'aapl',\r\n            name: 'AAPL Stock Price',\r\n            data: props.data\r\n        },\r\n        ],\r\n        rangeSelector: {\r\n            allButtonsEnabled: false,\r\n        },\r\n        containerProps: {\r\n\r\n        },\r\n        credits: {\r\n            text: 'FX Empire',\r\n            href: 'https://www.fxempire.com/',\r\n            style: {\r\n                color: 'grey',\r\n                fontSize: '15px'\r\n            }\r\n        },\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <section className='graph-section flex column align-center'>\r\n            <div className=\"btns flex space-around\">\r\n                {btnData.map(data => <Button key={data.id} data={data} onChangePeriod={props.onChangePeriod} />)}\r\n            </div>\r\n\r\n            <div className='graph-container'>\r\n                <HighchartsReact\r\n                    containerProps={{ style: { height: \"100%\" } }}\r\n                    highcharts={Highcharts}\r\n                    constructorType={'stockChart'}\r\n                    options={options}\r\n                />\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Graph;","C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\services\\storageService.js",["50"],"// Saving to localSession \nfunction store(key, value) {\n    sessionStorage[key] = JSON.stringify(value);\n}\n\n\n// Loading from localSession\nfunction load(key, defaultValue = []) {\n    var value = sessionStorage[key];\n    console.log('loading from storage');\n    if (!value) return defaultValue\n    else return JSON.parse(value);\n}\n\nexport default {\n    store,\n    load\n}","C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\cmps\\Footer.jsx",[],"C:\\Users\\almog\\Desktop\\fx-empire\\frontend\\src\\reportWebVitals.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":33,"column":13,"nodeType":"57","messageId":"58","endLine":33,"endColumn":25},{"ruleId":"59","severity":1,"message":"60","line":44,"column":9,"nodeType":"61","messageId":"62","endLine":44,"endColumn":22},{"ruleId":"63","severity":1,"message":"64","line":15,"column":1,"nodeType":"65","endLine":18,"endColumn":2},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'newGraphData' is assigned a value but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'rangeSelector'.","ObjectExpression","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]